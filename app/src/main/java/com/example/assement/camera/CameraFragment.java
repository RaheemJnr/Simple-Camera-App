package com.example.assement.camera;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.ImageFormat;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.Log;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.LayoutInflater;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.Fragment;

import com.example.assement.R;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;


public class CameraFragment extends Fragment {

    /**
     * Conversion from screen rotation to JPEG orientation.
     */
    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();

    static {
        ORIENTATIONS.append(Surface.ROTATION_0, 90);
        ORIENTATIONS.append(Surface.ROTATION_90, 0);
        ORIENTATIONS.append(Surface.ROTATION_180, 270);
        ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    /**
     * An [TextureView] to show the camera preview from camera one.
     */
    TextureView textureViewOne;
    /**
     * button to save the image
     */
    Button saveButton;
    /**
     * for saving to file
     */
    File file;
    /**
     * A [Handler] for running tasks in the background.
     */
    Handler mBackgroundHandler;
    /**
     * An additional thread for running tasks that shouldn't block the UI.
     */
    HandlerThread mBackgroundThread;
    CameraDevice cameraDevice;
    /**
     * [CaptureRequest] generated by [.previewRequestBuilder]
     */
    CaptureRequest captureRequest;
    /**
     * A [CameraCaptureSession] for camera preview.
     */
    CameraCaptureSession cameraCaptureSession;
    /**
     * [CaptureRequest.Builder] for the camera preview
     */
    CaptureRequest.Builder captureRequestBuilder;
    /**
     * The [android.util.Size] of camera preview.
     */
    private Size imageDimension;
    /**
     * [CameraDevice.StateCallback] is called when [CameraDevice] changes its state.
     */
    private final CameraDevice.StateCallback stateCallBack = new CameraDevice.StateCallback() {
        @Override
        public void onOpened(@NonNull CameraDevice camera) {
            cameraDevice = camera;
            try {
                creteCameraOnePreviewSession();
            } catch (CameraAccessException e) {
                e.printStackTrace();
                Log.d("STATECALLBACL", e.toString());
            }
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
            cameraDevice.close();
        }

        @Override
        public void onError(@NonNull CameraDevice cameraDevice, int i) {
            cameraDevice.close();
        }
    };
    /**
     * An [ImageReader] that handles still image capture.
     */
    private ImageReader imageReader;
    /**
     * ID of the current [CameraDevice].
     */
    private String cameraId;
    /**
     * [TextureView.SurfaceTextureListener] handles several lifecycle events on the camera one
     * [TextureView].
     */
    TextureView.SurfaceTextureListener textureListener = new TextureView.SurfaceTextureListener() {
        @Override
        public void onSurfaceTextureAvailable(@NonNull SurfaceTexture surfaceTexture, int i, int i1) {
            try {
                openCameraOne();
            } catch (CameraAccessException e) {
                Log.d("CAMERAONE", e.getMessage());
                e.printStackTrace();
            }
        }

        @Override
        public void onSurfaceTextureSizeChanged(@NonNull SurfaceTexture surfaceTexture, int i, int i1) {

        }

        @Override
        public boolean onSurfaceTextureDestroyed(@NonNull SurfaceTexture surfaceTexture) {
            return false;
        }

        @Override
        public void onSurfaceTextureUpdated(@NonNull SurfaceTexture surfaceTexture) {

        }
    };

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_camera, container, false);
    }

    @SuppressLint("ClickableViewAccessibility")
    @Override
    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        saveButton = view.findViewById(R.id.save_button);
        textureViewOne = view.findViewById(R.id.textureView1);
        textureViewOne.setSurfaceTextureListener(textureListener);

        //save button click listener
        saveButton.setOnClickListener(view1 -> {
            try {
                takePicture();
            } catch (CameraAccessException e) {
                e.printStackTrace();
            }
        });

        //stop cam one when touched
//        textureViewOne.setOnTouchListener((view12, motionEvent) -> {
//            try {
//                cameraCaptureSession.stopRepeating();
//            } catch (CameraAccessException e) {
//                e.printStackTrace();
//            }
//
//            return false;
//        });
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == 101) {

            if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
                Toast.makeText(getContext(), "camera permission is needed", Toast.LENGTH_SHORT).show();
            }
        }
    }

    //on resume
    @Override
    public void onResume() {
        startBackgroundThread();
        // When the screen is turned off and turned back on, the SurfaceTexture is already
        // available, and "onSurfaceTextureAvailable" will not be called. In that case, we can open
        // a camera and start preview from here (otherwise, we wait until the surface is ready in
        // the SurfaceTextureListener).
        if (textureViewOne.isAvailable()) {
            try {
                openCameraOne();
            } catch (CameraAccessException e) {
                e.printStackTrace();
            }
        } else textureViewOne.setSurfaceTextureListener(textureListener);
        super.onResume();
    }

    //on pause
    @Override
    public void onPause() {
        try {
            stopBackgroundThread();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        super.onPause();
    }

    /**
     * Start the background thread and its [Handler].
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread("camera Background");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its [Handler].
     */
    protected void stopBackgroundThread() throws InterruptedException {
        mBackgroundThread.quitSafely();
        mBackgroundThread.join();
        mBackgroundThread = null;
        mBackgroundHandler = null;
    }

    /**
     * Creates a new [CameraCaptureSession] for camera one preview.
     */
    private void creteCameraOnePreviewSession() throws CameraAccessException {

        SurfaceTexture texture = textureViewOne.getSurfaceTexture();
        // We configure the size of default buffer to be the size of camera preview we want.
        texture.setDefaultBufferSize(imageDimension.getWidth(), imageDimension.getHeight());
        // This is the output Surface we need to start preview.
        Surface surface = new Surface(texture);

        // We set up a CaptureRequest.Builder with the output Surface.
        captureRequestBuilder = cameraDevice.createCaptureRequest(
                CameraDevice.TEMPLATE_PREVIEW
        );
        captureRequestBuilder.addTarget(surface);

        // Here, we create a CameraCaptureSession for camera preview.

        cameraDevice.createCaptureSession(Collections.singletonList(surface), new CameraCaptureSession.StateCallback() {
            @Override
            public void onConfigured(@NonNull CameraCaptureSession session) {
                // The camera is already closed
                if (cameraDevice == null) return;

                cameraCaptureSession = session;
                try {
                    updatePreview();
                } catch (CameraAccessException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
                Log.d("CONFIG_CHANGE", "Configuration Change");
            }
        }, null);
    }

    //update preview
    private void updatePreview() throws CameraAccessException {
        // The camera is already closed
        if (cameraDevice == null) return;
        // When the session is ready, we start displaying the preview.
        captureRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
        // Finally, we start displaying the camera preview.
        cameraCaptureSession.setRepeatingRequest(captureRequestBuilder.build(), null, mBackgroundHandler);
        // The camera is already closed
    }


    /**
     * Opens camera one specified by [Camera2BasicFragment.cameraId].
     */
    private void openCameraOne() throws CameraAccessException {
        CameraManager cameraManager = (CameraManager) getActivity().getSystemService(Context.CAMERA_SERVICE);

        cameraId = cameraManager.getCameraIdList()[0];

        CameraCharacteristics characteristics = cameraManager.getCameraCharacteristics(cameraId);

        StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
        imageDimension = map.getOutputSizes(SurfaceTexture.class)[0];

        if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED
                && ActivityCompat.checkSelfPermission(getContext(),
                Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(getActivity(),
                    new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE},
                    101);
        }
        cameraManager.openCamera(cameraId, stateCallBack, null);
    }

    //method for taking picture
    private void takePicture() throws CameraAccessException {
        if (cameraDevice == null) return;
        CameraManager cameraManager = (CameraManager) getActivity().getSystemService(Context.CAMERA_SERVICE);

        CameraCharacteristics characteristics = cameraManager.getCameraCharacteristics(cameraDevice.getId());
        Size[] jpegSize;
        jpegSize = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
                .getOutputSizes(ImageFormat.JPEG);

        int width = 640;
        int height = 480;

        if (jpegSize != null && jpegSize.length > 0) {

            width = jpegSize[0].getWidth();
            height = jpegSize[0].getHeight();
        }
        ImageReader reader = ImageReader.newInstance(width, height, ImageFormat.JPEG, 1);
        List<Surface> outputSurface = new ArrayList<>(2);
        outputSurface.add(reader.getSurface());
        outputSurface.add(new Surface(textureViewOne.getSurfaceTexture()));
        //create capture request
        final CaptureRequest.Builder captureBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
        captureBuilder.addTarget(reader.getSurface());
        captureBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
        //get rotation
        int rotation = getActivity().getWindowManager().getDefaultDisplay().getRotation();
        captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, ORIENTATIONS.get(rotation));
        //get current time and date
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        String format = s.format(new Date());
        String fileName = format + "-" + cameraId + ".jpg";
        //save to file
        file = new File(getActivity().getExternalFilesDir(null) + fileName);
        //
        ImageReader.OnImageAvailableListener readerListner = Reader -> {

            Image image;
            image = Reader.acquireLatestImage();

            ByteBuffer buffer = image.getPlanes()[0].getBuffer();
            byte[] bytes = new byte[buffer.capacity()];
            buffer.get(bytes);
            try {
                save(bytes);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (image != null) {
                    image.close();
                }
            }
        };
        reader.setOnImageAvailableListener(readerListner, mBackgroundHandler);

        final CameraCaptureSession.CaptureCallback captureListner = new CameraCaptureSession.CaptureCallback() {
            @Override
            public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result) {
                super.onCaptureCompleted(session, request, result);
                Toast.makeText(getContext(), "saved", Toast.LENGTH_SHORT).show();
                try {
                    creteCameraOnePreviewSession();
                } catch (CameraAccessException e) {
                    e.printStackTrace();
                }
            }
        };

        cameraDevice.createCaptureSession(outputSurface, new CameraCaptureSession.StateCallback() {
            @Override
            public void onConfigured(@NonNull CameraCaptureSession session) {
                try {
                    session.capture(captureBuilder.build(), captureListner, mBackgroundHandler);
                } catch (CameraAccessException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {

            }
        }, mBackgroundHandler);

    }

    //save picture
    private void save(byte[] bytes) throws IOException {
        OutputStream outputStream;
        outputStream = new FileOutputStream(file);

        outputStream.write(bytes);
        outputStream.close();
    }

}

